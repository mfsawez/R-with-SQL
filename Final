# Final-Assignment-IBM
Lets first load the RODBC package:
library(RODBC)

Problem 1
Create tables
Establish a connection to the Db2 database, and create the following four tables using the RODBC package in R. 
Use the separate cells provided below to create each of your tables.

CROP_DATA
FARM_PRICES
DAILY_FX
MONTHLY_FX


# Establish database connection
    dsn_driver <- "{IBM DB2 ODBC Driver}"
    dsn_database <- "bludb"            # e.g. "bludb"
    dsn_hostname <- "" # e.g "54a2f15b-5c0f-46df-8954-.databases.appdomain.cloud"
    dsn_port <- ""   # e.g. "32733" 
    dsn_protocol <- "TCPIP"            # i.e. "TCPIP"
    dsn_uid <- ""        # e.g. "zjh17769"
    dsn_pwd <- ""      # e.g. "zcwd4+8gbq9bm5k4"  
    dsn_security <- "ssl"

    conn_path <- paste("DRIVER=",dsn_driver,
                  ";DATABASE=",dsn_database,
                  ";HOSTNAME=",dsn_hostname,
                  ";PORT=",dsn_port,
                  ";PROTOCOL=",dsn_protocol,
                  ";UID=",dsn_uid,
                  ";PWD=",dsn_pwd,
                  ";SECURITY=",dsn_security,        
                    sep="")
    conn <- odbcDriverConnect(conn_path)

    # Dump connection info
    ##############################################################
    sql.info <- sqlTypeInfo(conn)
    conn.info <- odbcGetInfo(conn)
    conn.info["DBMS_Name"]
    conn.info["DBMS_Ver"]
    conn.info["Driver_ODBC_Ver"]

# Solution 1 : Create the tables
	#DROP tables if exists
    # tables <- c("CROP_DATA", "DAILY_FX","FARM_PRICES","MONTHLY_FX") 

    # for (table in tables) {
        # # Drop tables if they already exist
        # out <- sqlTables(conn, tableType = "TABLE",
                          # tableName = table)
        # if (nrow(out)>0) {
            # err <- sqlDrop(conn, table,
                            # errors=FALSE)  
            # if (err==-1) {
                # cat("An error has occurred.\n")
                # err.msg <- odbcGetErrMsg(conn)
                # for (error in err.msg) { 
                    # cat(error,"\n")
                # }
            # } 
            # else {
                # cat ("Table: ",table," was dropped\n")
            # }
        # }
        # else {
              # cat ("Table: ", table," does not exist\n")
        # }
    # }


# CROP_DATA:

    df1 <- sqlQuery(conn, "CREATE TABLE CROP_DATA (
                                      CD_ID INTEGER NOT NULL,
                                      YEAR DATE NOT NULL,
                                      CROP_TYPE VARCHAR(20) NOT NULL,
                                      GEO VARCHAR(20) NOT NULL, 
                                      SEEDED_AREA INTEGER NOT NULL,
                                      HARVESTED_AREA INTEGER NOT NULL,
                                      PRODUCTION INTEGER NOT NULL,
                                      AVG_YIELD INTEGER NOT NULL,
                                      PRIMARY KEY (CD_ID)
                                      )", 
                    errors=FALSE
                    )

    if (df1 == -1){
        cat ("An error has occurred.\n")
        msg <- odbcGetErrMsg(conn)
        print (msg)
    } else {
        cat ("Table was created successfully.\n")
    }

# FARM_PRICES:

df2 <- sqlQuery(conn, "CREATE TABLE FARM_PRICES (
                                CD_ID INTEGER NOT NULL,
                                DATE DATE NOT NULL,
                                CROP_TYPE VARCHAR(20) NOT NULL,
                                GEO VARCHAR(20) NOT NULL,
                                PRICE_PRERMT FLOAT(6),
                                PRIMARY KEY (CD_ID)
                                )",
                    errors=FALSE
                    )

    if (df2 == -1){
        cat ("An error has occurred.\n")
        msg <- odbcGetErrMsg(conn)
        print (msg)
    } else {
        cat ("Table was created successfully.\n")
    }

# DAILY_FX:

df3 <- sqlQuery(conn, "CREATE TABLE DAILY_FX (
                                DFX_ID INTEGER NOT NULL,
                                DATE DATE NOT NULL, 
                                FXUSDCAD FLOAT(6),
                                PRIMARY KEY (DFX_ID)
                                )",
                    errors=FALSE
                    )

    if (df3 == -1){
        cat ("An error has occurred.\n")
        msg <- odbcGetErrMsg(conn)
        print (msg)
    } else {
        cat ("Table was created successfully.\n")
    }

# MONTHLY_FX:

df4 <- sqlQuery(conn, "CREATE TABLE MONTHLY_FX (
                                DFX_ID INTEGER NOT NULL,
                                DATE DATE NOT NULL, 
                                FXUSDCAD FLOAT(6),
                                PRIMARY KEY (DFX_ID)
                                )",
                    errors=FALSE
                    )

    if (df4 == -1){
        cat ("An error has occurred.\n")
        msg <- odbcGetErrMsg(conn)
        print (msg)
    } else {
        cat ("Table was created successfully.\n")
    }

Problem 2
Read Datasets and Load Tables
Read the datasets into R dataframes using the urls provided above. Then load your tables.

# Solution 2 : Read datasets and load tables

crop_df <- read.csv('https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-RP0203EN-SkillsNetwork/labs/Final%20Project/Annual_Crop_Data.csv', colClasses=c(YEAR="character"))
farm_pricesdf <- read.csv('https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-RP0203EN-SkillsNetwork/labs/Final%20Project/Monthly_Farm_Prices.csv', colClasses=c(DATE="character"))
daily_fxdf <- read.csv("https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-RP0203EN-SkillsNetwork/labs/Final%20Project/Daily_FX.csv", colClasses=c(DATE="character"))
monthly_fxdf <- read.csv("https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-RP0203EN-SkillsNetwork/labs/Final%20Project/Monthly_FX.csv", colClasses=c(DATE="character"))

head(crop_df)
head(farm_pricesdf)
head(daily_fxdf)
head(monthly_fxdf)

sqlSave(conn, crop_df, "CROP_DATA", append=TRUE, fast=FALSE, rownames=FALSE, colnames=FALSE, verbose=FALSE)
sqlSave(conn, farm_pricesdf, "FARM_PRICES", append=TRUE, fast=FALSE, rownames=FALSE, colnames=FALSE, verbose=FALSE)
sqlSave(conn, daily_fxdf, "DAILY_FX", append=TRUE, fast=FALSE, rownames=FALSE, colnames=FALSE, verbose=FALSE)
sqlSave(conn, monthly_fxdf, "MONTHLY_FX", append=TRUE, fast=FALSE, rownames=FALSE, colnames=FALSE, verbose=FALSE)


Problem 3
How many records are in the farm prices dataset?
# Solution 3
totalRec_Farm <- "SELECT COUNT(CD_ID) FROM FARM_PRICES;"
sqlQuery(conn, totalRec_Farm)

Problem 4
Which geographies are included in the farm prices dataset?
# Solution 4
Geos <- "SELECT DISTINCT GEO FROM FARM_PRICES;"
sqlQuery(conn, Geos)

Problem 5
How many hectares of Rye were harvested in Canada in 1968?
# Solution 5
Rye <- "SELECT SUM(HARVESTED_AREA) FROM CROP_DATA WHERE CROP_TYPE = 'Rye' AND YEAR LIKE '%1968%';"
sqlQuery(conn, Rye)

Problem 6
Query and display the first 6 rows of the farm prices table for Rye.
# Solution 6
query <- "SELECT * FROM FARM_PRICES WHERE CROP_TYPE = 'Rye' LIMIT 6;"
sqlQuery(conn, query)

Problem 7
Which provinces grew Barley?
# Solution 7
Barley <- "SELECT DISTINCT GEO, CROP_TYPE FROM CROP_DATA WHERE CROP_TYPE = 'Barley';"
sqlQuery(conn, Barley)

Problem 8
Find the first and last dates for the farm prices data.
# Solution 8
Recent <- "SELECT MAX(DATE) FROM FARM_PRICES;"
sqlQuery(conn, Recent)

Earliest <- "SELECT MIN(DATE) FROM FARM_PRICES;"
sqlQuery(conn, Earliest)

Problem 9
Which crops have ever reached a farm price greater than or equal to $350 per metric tonne?
# Solution 9
MoreThan350 <- "SELECT DISTINCT CROP_TYPE, PRICE_PRERMT FROM FARM_PRICES WHERE PRICE_PRERMT >= 350;"
sqlQuery(conn, MoreThan350)

Problem 10
Rank the crop types harvested in Saskatchewan in the year 2000 by their average yield. Which crop performed best?
# Solution 10
Saskatchewan <- "SELECT CROP_TYPE, GEO, HARVESTED_AREA, AVG_YIELD FROM CROP_DATA WHERE GEO = 'Saskatchewan' AND YEAR LIKE '%2000%' ORDER BY AVG_YIELD;"
sqlQuery(conn, Saskatchewan)

Problem 11
Rank the crops and geographies by their average yield (KG per hectare) since the year 2000. 
Which crop and province had the highest average yield since the year 2000?
# Solution 11
YEAR2000 <- "SELECT CROP_TYPE, GEO, AVG_YIELD FROM CROP_DATA WHERE YEAR >= '2000-12-31' ORDER BY AVG_YIELD;"
sqlQuery(conn, YEAR2000)

Problem 12
Use a subquery to determine how much wheat was harvested in Canada in the most recent year of the data.
# Solution 12
Wheat <- "SELECT CROP_TYPE, YEAR, (SELECT SUM(HARVESTED_AREA) FROM CROP_DATA) FROM CROP_DATA WHERE CROP_TYPE = 'Wheat' ORDER BY YEAR;"
sqlQuery(conn, Wheat)

Problem 13
Use an implicit inner join to calculate the monthly price per metric tonne of Canola grown in Saskatchewan in both Canadian and US dollars. 
Display the most recent 6 months of the data.
# Solution 13
MPPMTC <- "SELECT FARM_PRICES.DATE, CROP_TYPE AS Crop, GEO AS Location, PRICE_PRERMT AS USD, PRICE_PRERMT*FXUSDCAD AS CAD
FROM FARM_PRICES, MONTHLY_FX where FARM_PRICES.DATE = MONTHLY_FX.DATE
AND CROP_TYPE = 'Canola' AND GEO = 'Saskatchewan' 
ORDER BY DATE DESC 
LIMIT 6;"
sqlQuery(conn, MPPMTC)
